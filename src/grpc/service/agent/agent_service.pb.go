// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/grpc/service/agent/agent_service.proto

/*
Package agent is a generated protocol buffer package.

It is generated from these files:
	src/grpc/service/agent/agent_service.proto

It has these top-level messages:
	LoginRequest
	LoginReply
*/
package agent

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type LoginReply struct {
	Sucess bool `protobuf:"varint,1,opt,name=sucess" json:"sucess,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginReply) GetSucess() bool {
	if m != nil {
		return m.Sucess
	}
	return false
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "agent.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "agent.LoginReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AgentService service

type AgentServiceClient interface {
	// login rpc
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
}

type agentServiceClient struct {
	cc *grpc.ClientConn
}

func NewAgentServiceClient(cc *grpc.ClientConn) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/agent.AgentService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgentService service

type AgentServiceServer interface {
	// login rpc
	Login(context.Context, *LoginRequest) (*LoginReply, error)
}

func RegisterAgentServiceServer(s *grpc.Server, srv AgentServiceServer) {
	s.RegisterService(&_AgentService_serviceDesc, srv)
}

func _AgentService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agent.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AgentService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/service/agent/agent_service.proto",
}

func init() { proto.RegisterFile("src/grpc/service/agent/agent_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0x2e, 0x4a, 0xd6,
	0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x4f, 0x4c, 0x4f,
	0xcd, 0x2b, 0x81, 0x90, 0xf1, 0x50, 0x31, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x56, 0xb0,
	0xa0, 0x92, 0x0a, 0x17, 0x8f, 0x4f, 0x7e, 0x7a, 0x66, 0x5e, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71,
	0x89, 0x90, 0x08, 0x17, 0x6b, 0x49, 0x7e, 0x76, 0x6a, 0x9e, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67,
	0x10, 0x84, 0xa3, 0xa4, 0xc2, 0xc5, 0x05, 0x55, 0x55, 0x90, 0x53, 0x29, 0x24, 0xc6, 0xc5, 0x56,
	0x5c, 0x9a, 0x9c, 0x5a, 0x5c, 0x0c, 0x56, 0xc4, 0x11, 0x04, 0xe5, 0x19, 0x39, 0x72, 0xf1, 0x38,
	0x82, 0x0c, 0x0d, 0x86, 0x58, 0x24, 0x64, 0xc8, 0xc5, 0x0a, 0xd6, 0x25, 0x24, 0xac, 0x07, 0xb6,
	0x4c, 0x0f, 0xd9, 0x26, 0x29, 0x41, 0x54, 0xc1, 0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0,
	0xe3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x66, 0x77, 0xbc, 0xca, 0x00, 0x00, 0x00,
}
